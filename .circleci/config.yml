# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

# Reusable commands
commands:
  list:
    description: "List directory contents"
    parameters:
      path:
        type: string
        default: "."
    steps:
      - run:
          name: "List Directory"
          command: ls -al << parameters.path >>
  install:
    description: "Install & Link dependencies"
    parameters:
      method:
        type: string
        default: "bootstrap"
    steps:
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - run:
          name: Install & Link Dependencies
          command: yarn << parameters.method >>
      - save_cache:
          paths:
            - node_modules
            - examples/**/node_modules
            - packages/**/node_modules
            - tools/**/node_modules
          key: v2-dependencies-{{ checksum "package.json" }}

# Common executor for node based jobs
executors:
  node-executor:
    docker:
      - image: circleci/node:10.15
    working_directory: ~/pixeloven

# Define jobs
jobs:
  setup:
    executor: node-executor
    steps:
      # Allows us to pre-cache yarn install
      - checkout
      - run:
          name: Install lerna
          command: yarn add lerna -g
      - install
      - list

  lint:
    executor: node-executor
    steps:
      - checkout
      - install:
          method: "link-packages"

        # Run task
      - run:
          name: Lint source
          command: yarn lint

  compile:
    executor: node-executor
    steps:
      - checkout
      - install:
          method: "link-packages"

        # Run build and test
      - run:
          name: Compile source
          command: yarn compile

      # Save project
      - persist_to_workspace:
          root: .
          paths: 
            - packages/**/dist
            - tools/**/dist

  document:
    executor: node-executor
    steps:
      # Download and cache dependencies
      - checkout
      - install:
          method: "link-packages"

      # Generate documentation
      - run:
          name: Document source
          command: yarn document

      # Save project
      - persist_to_workspace:
          root: .
          paths: 
            - examples/**/docs
            - packages/**/docs
            - tools/**/docs

  build:
    executor: node-executor
    steps:
      # Download and cache dependencies
      - checkout

      - attach_workspace:
          at: ~/pixeloven

      # Check for compiled files
      - list:
          path: packages/**/dist
      - list:
          path: tools/**/dist

      # Link compiled packages
      - install:
          method: "link-packages"

      - run:
          name: Create .env file
          command: yarn env:production

        # Run build
      - run:
          name: Build source
          command: yarn build

      # Save project
      - persist_to_workspace:
          root: .
          paths: 
            - examples/**/dist

  test:
    executor: node-executor
    steps:
      # Download and cache dependencies
      - checkout

      - attach_workspace:
          at: ~/pixeloven

      # Check for compiled & build files
      - list:
          path: examples/**/dist
      - list:
          path: packages/**/dist
      - list:
          path: tools/**/dist

      # Link compiled packages
      - install:
          method: "link-packages"

        # Run test
      - run:
          name: Test source
          command: yarn test

      # Save project
      - persist_to_workspace:
          root: .
          paths: 
            - examples/**/coverage
            - packages/**/coverage
            - tools/**/coverage

  report:
    executor: node-executor
    steps:
      # Download and cache dependencies
      - checkout

      - attach_workspace:
          at: ~/pixeloven

      - install:
          method: "link-packages"

      # Check for coverage files for reporting
      - list:
          path: examples/**/coverage/lcov.info
      - list:
          path: packages/**/coverage/lcov.info
      - list:
          path: tools/**/coverage/lcov.info

      # Run test and report
      - run:
          name: Report source
          command: yarn report-coverage

  deploy:
    executor: node-executor
    steps:

      - attach_workspace:
          at: ~/pixeloven

       # Save dist artifacts
      - store_artifacts:
          path: packages/**/dist
          destination: packages/dist
      - store_artifacts:
          path: examples/**/dist
          destination: examples/dist
      - store_artifacts:
          path: tools/**/dist
          destination: tools/dist

       # Save coverage artifacts
      - store_artifacts:
          path: packages/**/coverage
          destination: packages/coverage
      - store_artifacts:
          path: examples/**/coverage
          destination: examples/coverage
      - store_artifacts:
          path: tools/**/coverage
          destination: examples/coverage

      # Save docs artifacts
      - store_artifacts:
          path: packages/**/docs
          destination: packages/docs
      - store_artifacts:
          path: examples/**/docs
          destination: examples/docs
      - store_artifacts:
          path: tools/**/docs
          destination: examples/docs

      # @todo generate docs and run newly compiled tool to deploy to github pages
      # doc gen might be it's own job though

      # @todo need to do this https://github.com/atlassian/lerna-semantic-release
      # @todo would be nice to also deploy the above to a special branch for github
      # https://blog.frederikring.com/articles/deploying-github-pages-circle-ci/
      # should add the typedocs as well.

workflows:
  version: 2.1
  runner:
    jobs:
      - setup
      - lint:
          requires:
            - setup
      - compile:
          requires:
            - setup
      - document:
          requires:
            - setup
      - build:
          requires:
            - compile
            - lint
      - test:
          requires:
            - build
      - report:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master